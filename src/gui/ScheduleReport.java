/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import basicClasses.Course;
import basicClasses.Faculty;
import basicClasses.Section;
import dataManagement.SystemData;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import javax.swing.JFrame;

/**
 *
 * @author Sandeep
 */
public class ScheduleReport extends javax.swing.JPanel {
    JFrame  panelHolder;
    SystemData systemData;
    /**
     * Creates new form ImportStudent
     */
    public ScheduleReport(JFrame  panelHolder, SystemData systemData) {
        this.panelHolder = panelHolder;
        this.systemData = systemData;  
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        sectionsButton = new javax.swing.JButton();
        FacultyButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Schedule Report");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        sectionsButton.setText("View List of Sections");
        sectionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sectionsButtonActionPerformed(evt);
            }
        });

        FacultyButton.setText("View Faculty Load");
        FacultyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FacultyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sectionsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(FacultyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(sectionsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(FacultyButton)
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel2, new java.awt.GridBagConstraints());
    }// </editor-fold>//GEN-END:initComponents

    private void sectionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sectionsButtonActionPerformed
        System.out.println("--List of Sections--");
        System.out.println("Course     Faculty    NoOfStudent");
        Object columnNames[] = {"Course", "Faculty", "No of Students"};
        Iterator<Map.Entry<Course, ArrayList<Section>>> it= 
                systemData.getSchedule().allocatedSections.entrySet().iterator();
        Object rowData[][] = new Object[systemData.getSchedule().noOfSections][3];
        int i = 0;
        while(it.hasNext()){
            Map.Entry<Course, ArrayList<Section>> entry = it.next();
            ArrayList<Section> sections = entry.getValue();
            for(Section section: sections){
                if(section.students!=null){                    
                    System.out.println(section.course+"  "+section.faculty+"   "+section.students.size());
                    rowData[i][0] = section.course;
                    rowData[i][1] = section.faculty;
                    rowData[i][2] = section.students.size();    
                    ++i;
                }
            }
        }
        panelHolder.setTitle("List of Sections");
        panelHolder.getContentPane().removeAll();
        panelHolder.getContentPane().add(new ViewReport(panelHolder, systemData, "ScheduleReport",
                "List of Sections", rowData, columnNames));
        panelHolder.getContentPane().revalidate(); 
    }//GEN-LAST:event_sectionsButtonActionPerformed

    private void FacultyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FacultyButtonActionPerformed
        System.out.println("--Faculty Load--");
        System.out.println("Faculty   Courses   TotalTeachingHours");        
        Object columnNames[] = {"Faculty", "Courses", "Total Teaching Hours"};
        HashSet<Faculty> faculties = new HashSet(systemData.getFaculties().values());        
        Object rowData[][] = new Object[faculties.size()][3];
        int i = 0;
        for(Faculty faculty: faculties){
            rowData[i][0] = faculty;
            System.out.print(faculty+"  ");
            Iterator<Map.Entry<Course, ArrayList<Section>>> it= 
                systemData.getSchedule().allocatedSections.entrySet().iterator();
            int noofSections =0;
            String courseList = null;
            while(it.hasNext()){
                Entry<Course, ArrayList<Section>> entry = it.next();
                ArrayList<Section> sections = entry.getValue();
                for(Section section: sections){
                    if(section.students!=null && !section.students.isEmpty() && section.faculty.equals(faculty)){ 
                        if(courseList==null)
                            courseList = section.course.toString();
                        else
                            courseList = courseList+", "+ section.course;
                        System.out.print(section.course+"  ");
                        ++noofSections;
                    }
                }
            } 
            System.out.println((noofSections*3));
            rowData[i][1] = courseList;
            rowData[i][2] = noofSections*3;
            ++i;
        }
        
        panelHolder.setTitle("Faculty Load");
        panelHolder.getContentPane().removeAll();
        panelHolder.getContentPane().add(new ViewReport(panelHolder, systemData, "ScheduleReport",
                "Faculty Load", rowData, columnNames));
        panelHolder.getContentPane().revalidate(); 
    }//GEN-LAST:event_FacultyButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton FacultyButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton sectionsButton;
    // End of variables declaration//GEN-END:variables
}
